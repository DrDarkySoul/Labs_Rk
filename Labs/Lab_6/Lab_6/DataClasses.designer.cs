#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab_6
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Data")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertShiping(Shiping instance);
    partial void UpdateShiping(Shiping instance);
    partial void DeleteShiping(Shiping instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Lab_6.Properties.Settings.Default.DataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Shiping> Shiping
		{
			get
			{
				return this.GetTable<Shiping>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Client> Client
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shiping")]
	public partial class Shiping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _shipDate;
		
		private System.Nullable<int> _clientId;
		
		private System.Nullable<int> _employeeId;
		
		private string _paymentDate;
		
		private string _customerName;
		
		private string _customerAdress;
		
		private EntitySet<Order> _Order;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Employee> _Employee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnshipDateChanging(string value);
    partial void OnshipDateChanged();
    partial void OnclientIdChanging(System.Nullable<int> value);
    partial void OnclientIdChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    partial void OnpaymentDateChanging(string value);
    partial void OnpaymentDateChanged();
    partial void OncustomerNameChanging(string value);
    partial void OncustomerNameChanged();
    partial void OncustomerAdressChanging(string value);
    partial void OncustomerAdressChanged();
    #endregion
		
		public Shiping()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			this._Client = default(EntityRef<Client>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shipDate", DbType="NChar(10)")]
		public string shipDate
		{
			get
			{
				return this._shipDate;
			}
			set
			{
				if ((this._shipDate != value))
				{
					this.OnshipDateChanging(value);
					this.SendPropertyChanging();
					this._shipDate = value;
					this.SendPropertyChanged("shipDate");
					this.OnshipDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientId", DbType="Int")]
		public System.Nullable<int> clientId
		{
			get
			{
				return this._clientId;
			}
			set
			{
				if ((this._clientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclientIdChanging(value);
					this.SendPropertyChanging();
					this._clientId = value;
					this.SendPropertyChanged("clientId");
					this.OnclientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
		public System.Nullable<int> employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentDate", DbType="NChar(10)")]
		public string paymentDate
		{
			get
			{
				return this._paymentDate;
			}
			set
			{
				if ((this._paymentDate != value))
				{
					this.OnpaymentDateChanging(value);
					this.SendPropertyChanging();
					this._paymentDate = value;
					this.SendPropertyChanged("paymentDate");
					this.OnpaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerName", DbType="NChar(10)")]
		public string customerName
		{
			get
			{
				return this._customerName;
			}
			set
			{
				if ((this._customerName != value))
				{
					this.OncustomerNameChanging(value);
					this.SendPropertyChanging();
					this._customerName = value;
					this.SendPropertyChanged("customerName");
					this.OncustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerAdress", DbType="NVarChar(50)")]
		public string customerAdress
		{
			get
			{
				return this._customerAdress;
			}
			set
			{
				if ((this._customerAdress != value))
				{
					this.OncustomerAdressChanging(value);
					this.SendPropertyChanging();
					this._customerAdress = value;
					this.SendPropertyChanged("customerAdress");
					this.OncustomerAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shiping_Order", Storage="_Order", ThisKey="Id", OtherKey="shippingId")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Shiping", Storage="_Client", ThisKey="clientId", OtherKey="Id", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._clientId = value.Id;
					}
					else
					{
						this._clientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Shiping", Storage="_Employee", ThisKey="employeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Shiping.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Shiping.Add(this);
						this._employeeId = value.Id;
					}
					else
					{
						this._employeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Shiping = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Shiping = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _brend;
		
		private string _unit;
		
		private System.Nullable<float> _price;
		
		private System.Nullable<int> _presentCount;
		
		private EntitySet<Order> _Order;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnbrendChanging(string value);
    partial void OnbrendChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void OnpriceChanging(System.Nullable<float> value);
    partial void OnpriceChanged();
    partial void OnpresentCountChanging(System.Nullable<int> value);
    partial void OnpresentCountChanged();
    #endregion
		
		public Product()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brend", DbType="NChar(10)")]
		public string brend
		{
			get
			{
				return this._brend;
			}
			set
			{
				if ((this._brend != value))
				{
					this.OnbrendChanging(value);
					this.SendPropertyChanging();
					this._brend = value;
					this.SendPropertyChanged("brend");
					this.OnbrendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="NChar(10)")]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Real")]
		public System.Nullable<float> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentCount", DbType="Int")]
		public System.Nullable<int> presentCount
		{
			get
			{
				return this._presentCount;
			}
			set
			{
				if ((this._presentCount != value))
				{
					this.OnpresentCountChanging(value);
					this.SendPropertyChanging();
					this._presentCount = value;
					this.SendPropertyChanged("presentCount");
					this.OnpresentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order", Storage="_Order", ThisKey="Id", OtherKey="productId")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _shippingId;
		
		private System.Nullable<int> _productId;
		
		private System.Nullable<float> _price;
		
		private System.Nullable<int> _count;
		
		private EntityRef<Shiping> _Shiping;
		
		private EntityRef<Product> _Product;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnshippingIdChanging(System.Nullable<int> value);
    partial void OnshippingIdChanged();
    partial void OnproductIdChanging(System.Nullable<int> value);
    partial void OnproductIdChanged();
    partial void OnpriceChanging(System.Nullable<float> value);
    partial void OnpriceChanged();
    partial void OncountChanging(System.Nullable<int> value);
    partial void OncountChanged();
    #endregion
		
		public Order()
		{
			this._Shiping = default(EntityRef<Shiping>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shippingId", DbType="Int")]
		public System.Nullable<int> shippingId
		{
			get
			{
				return this._shippingId;
			}
			set
			{
				if ((this._shippingId != value))
				{
					if (this._Shiping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnshippingIdChanging(value);
					this.SendPropertyChanging();
					this._shippingId = value;
					this.SendPropertyChanged("shippingId");
					this.OnshippingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productId", DbType="Int")]
		public System.Nullable<int> productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIdChanging(value);
					this.SendPropertyChanging();
					this._productId = value;
					this.SendPropertyChanged("productId");
					this.OnproductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Real")]
		public System.Nullable<float> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shiping_Order", Storage="_Shiping", ThisKey="shippingId", OtherKey="Id", IsForeignKey=true)]
		public Shiping Shiping
		{
			get
			{
				return this._Shiping.Entity;
			}
			set
			{
				Shiping previousValue = this._Shiping.Entity;
				if (((previousValue != value) 
							|| (this._Shiping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shiping.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._Shiping.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._shippingId = value.Id;
					}
					else
					{
						this._shippingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shiping");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order", Storage="_Product", ThisKey="productId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._productId = value.Id;
					}
					else
					{
						this._productId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _lastName;
		
		private string _name;
		
		private string _position;
		
		private string _birthDate;
		
		private string _adress;
		
		private string _phone;
		
		private string _email;
		
		private EntitySet<Shiping> _Shiping;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnbirthDateChanging(string value);
    partial void OnbirthDateChanged();
    partial void OnadressChanging(string value);
    partial void OnadressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Employee()
		{
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NChar(10)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NChar(10)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthDate", DbType="NChar(10)")]
		public string birthDate
		{
			get
			{
				return this._birthDate;
			}
			set
			{
				if ((this._birthDate != value))
				{
					this.OnbirthDateChanging(value);
					this.SendPropertyChanging();
					this._birthDate = value;
					this.SendPropertyChanged("birthDate");
					this.OnbirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adress", DbType="NVarChar(50)")]
		public string adress
		{
			get
			{
				return this._adress;
			}
			set
			{
				if ((this._adress != value))
				{
					this.OnadressChanging(value);
					this.SendPropertyChanging();
					this._adress = value;
					this.SendPropertyChanged("adress");
					this.OnadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NChar(10)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Shiping", Storage="_Shiping", ThisKey="Id", OtherKey="employeeId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _adress;
		
		private string _phone;
		
		private string _email;
		
		private System.Nullable<int> _contractNumber;
		
		private string _annotation;
		
		private EntitySet<Shiping> _Shiping;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnadressChanging(string value);
    partial void OnadressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OncontractNumberChanging(System.Nullable<int> value);
    partial void OncontractNumberChanged();
    partial void OnannotationChanging(string value);
    partial void OnannotationChanged();
    #endregion
		
		public Client()
		{
			this._Shiping = new EntitySet<Shiping>(new Action<Shiping>(this.attach_Shiping), new Action<Shiping>(this.detach_Shiping));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adress", DbType="NVarChar(50)")]
		public string adress
		{
			get
			{
				return this._adress;
			}
			set
			{
				if ((this._adress != value))
				{
					this.OnadressChanging(value);
					this.SendPropertyChanging();
					this._adress = value;
					this.SendPropertyChanged("adress");
					this.OnadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NChar(10)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractNumber", DbType="Int")]
		public System.Nullable<int> contractNumber
		{
			get
			{
				return this._contractNumber;
			}
			set
			{
				if ((this._contractNumber != value))
				{
					this.OncontractNumberChanging(value);
					this.SendPropertyChanging();
					this._contractNumber = value;
					this.SendPropertyChanged("contractNumber");
					this.OncontractNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_annotation", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string annotation
		{
			get
			{
				return this._annotation;
			}
			set
			{
				if ((this._annotation != value))
				{
					this.OnannotationChanging(value);
					this.SendPropertyChanging();
					this._annotation = value;
					this.SendPropertyChanged("annotation");
					this.OnannotationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Shiping", Storage="_Shiping", ThisKey="Id", OtherKey="clientId")]
		public EntitySet<Shiping> Shiping
		{
			get
			{
				return this._Shiping;
			}
			set
			{
				this._Shiping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Shiping(Shiping entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
}
#pragma warning restore 1591
